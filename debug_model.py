"""
Script de d√©bogage pour comprendre le probl√®me d'import du mod√®le
"""
import os
import sys

# Ajout de tous les imports possibles avant de charger le mod√®le
print("üîç D√âBOGAGE DU MOD√àLE")
print("=" * 50)

# Imports sklearn complets
print("\nüì¶ IMPORTS SKLEARN COMPLETS...")
try:
    import sklearn
    from sklearn.linear_model import LogisticRegression
    from sklearn.calibration import CalibratedClassifierCV
    from sklearn.model_selection import train_test_split, cross_val_score
    from sklearn.preprocessing import StandardScaler, RobustScaler
    from sklearn.pipeline import Pipeline
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.metrics import accuracy_score, roc_auc_score
    print("‚úÖ Tous les imports sklearn r√©ussis")
except Exception as e:
    print(f"‚ùå Erreur import sklearn: {e}")

# Ajout des chemins du projet
sys.path.append('.')
sys.path.append('src')
sys.path.append('modeling')

# Test d'ouverture du fichier mod√®le
model_path = "modeling/models/best_model.pkl"
print(f"\nüîç ANALYSE DU FICHIER MOD√àLE: {model_path}")
print(f"Fichier existe: {os.path.exists(model_path)}")

if os.path.exists(model_path):
    print(f"Taille du fichier: {os.path.getsize(model_path)} bytes")
    
    # Tentative de lecture du contenu du pickle sans le d√©s√©rialiser
    print("\nüìã CONTENU DU PICKLE (premiers bytes):")
    with open(model_path, 'rb') as f:
        first_bytes = f.read(200)
        print(f"Premiers bytes: {first_bytes[:100]}")
    
    # Tentative de chargement avec gestion d'erreur d√©taill√©e
    print("\nüîÑ TENTATIVE DE CHARGEMENT...")
    try:
        import pickle
        
        # Cr√©ation d'un unpickler personnalis√© pour voir ce qui pose probl√®me
        class DebugUnpickler(pickle.Unpickler):
            def find_class(self, module, name):
                print(f"Recherche classe: {module}.{name}")
                try:
                    return super().find_class(module, name)
                except Exception as e:
                    print(f"‚ùå Erreur pour {module}.{name}: {e}")
                    raise
        
        with open(model_path, 'rb') as f:
            unpickler = DebugUnpickler(f)
            model = unpickler.load()
        
        print(f"‚úÖ Mod√®le charg√© avec succ√®s: {type(model)}")
        
        # Test de base
        if hasattr(model, 'predict_proba'):
            print("‚úÖ M√©thode predict_proba disponible")
        
    except Exception as e:
        print(f"‚ùå Erreur chargement d√©taill√©e: {e}")
        print(f"Type d'erreur: {type(e)}")
        
        # Si c'est un probl√®me d'import sp√©cifique, on essaie de l'importer
        error_str = str(e)
        if "CalibratedClassifierCV" in error_str:
            print("\nüîß TENTATIVE DE CORRECTION CalibratedClassifierCV...")
            try:
                # Import explicite
                from sklearn.calibration import CalibratedClassifierCV
                print("‚úÖ CalibratedClassifierCV import√©")
                
                # Re-tentative de chargement
                import pickle
                with open(model_path, 'rb') as f:
                    model = pickle.load(f)
                print(f"‚úÖ Mod√®le charg√© apr√®s correction: {type(model)}")
                
            except Exception as e2:
                print(f"‚ùå √âchec apr√®s correction: {e2}")

print("\n" + "=" * 50)
print("Analyse termin√©e") 