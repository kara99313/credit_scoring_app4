"""
üìä DATA PROCESSOR - Traitement des donn√©es d'entr√©e
===================================================
Module pour traiter et valider les donn√©es saisies par l'utilisateur
"""

import pandas as pd
import numpy as np
from typing import Dict, Any, List, Tuple, Optional
import logging
from datetime import datetime
import streamlit as st
import math

from config.settings import (
    RISK_CLASSES, CLIENT_RATINGS, DECISION_MATRIX, KPI_DEFINITIONS,
    get_risk_class, get_client_rating, get_final_decision,
    probability_to_score, score_to_probability, SCORING_CONFIG
)

# Configuration du logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CreditScoringProcessor:
    """
    Processeur principal pour le credit scoring avec logiques m√©tier avanc√©es
    """
    
    def __init__(self):
        """Initialisation du processeur."""
        self.feature_mappings = self._init_feature_mappings()
        self.business_rules = self._init_business_rules()
        logger.info("CreditScoringProcessor initialis√© avec succ√®s")
    
    def _init_feature_mappings(self) -> Dict[str, Dict]:
        """Initialise les mappings pour les variables cat√©gorielles."""
        return {
            'Job': {
                'management': 'Management/Cadre',
                'technician': 'Technicien',
                'entrepreneur': 'Entrepreneur', 
                'blue-collar': 'Ouvrier',
                'unknown': 'Inconnu',
                'retired': 'Retrait√©',
                'admin.': 'Administratif',
                'services': 'Services',
                'self-employed': 'Ind√©pendant',
                'unemployed': 'Ch√¥meur',
                'housemaid': 'Employ√© de maison',
                'student': '√âtudiant'
            },
            'Housing': {
                'own': 'Propri√©taire',
                'rent': 'Locataire', 
                'free': 'Log√© gratuitement'
            },
            'Saving_accounts': {
                'rich': '√âlev√© (>1000‚Ç¨)',
                'quite rich': 'Correct (500-1000‚Ç¨)',
                'little': 'Faible (<500‚Ç¨)',
                'critical': 'Critique',
                'unknown': 'Inconnu'
            },
            'Checking_account': {
                'rich': 'Solde √©lev√©',
                'moderate': 'Solde mod√©r√©',
                'little': 'Solde faible',
                'critical': 'D√©couvert',
                'unknown': 'Pas de compte'
            },
            'Purpose': {
                'car': 'V√©hicule',
                'furniture/equipment': 'Mobilier/√âquipement',
                'radio/TV': '√âlectronique',
                'domestic appliances': '√âlectrom√©nager',
                'repairs': 'R√©parations',
                'education': '√âducation',
                'business': 'Professionnel',
                'vacation/others': 'Vacances/Autres'
            },
            'Sex': {
                'male': 'Masculin',
                'female': 'F√©minin'
            },
            'current_credit_score': {
                '300-500': 'Faible (300-500)',
                '500-650': 'Moyen (500-650)',
                '650-750': 'Bon (650-750)',
                '750-850': 'Excellent (750-850)',
                'Inconnu': 'Non renseign√©'
            },
            'payment_history': {
                'Excellent': 'Aucun retard',
                'Bon': 'Retards occasionnels',
                'Moyen': 'Quelques incidents',
                'Mauvais': 'Incidents fr√©quents',
                'Aucun historique': 'Pas d\'historique'
            },
            'marital_status': {
                'C√©libataire': 'C√©libataire',
                'Mari√©(e)': 'Mari√©(e)',
                'Divorc√©(e)': 'Divorc√©(e)',
                'Veuf/Veuve': 'Veuf/Veuve',
                'Union libre': 'Union libre'
            }
        }
    
    def _init_business_rules(self) -> Dict[str, Any]:
        """Initialise les r√®gles m√©tier pour l'analyse."""
        return {
            'age_segments': {
                'young': {'range': (18, 30), 'risk_factor': 1.1, 'description': 'Jeune adulte'},
                'adult': {'range': (31, 50), 'risk_factor': 1.0, 'description': 'Adulte'},
                'senior': {'range': (51, 65), 'risk_factor': 0.9, 'description': 'Senior'},
                'retired': {'range': (66, 100), 'risk_factor': 1.05, 'description': 'Retrait√©'}
            },
            'income_credit_thresholds': {
                'excellent': 5.0,   # Ratio revenus/cr√©dit > 5
                'good': 3.0,        # Ratio > 3
                'acceptable': 2.0,   # Ratio > 2
                'risky': 1.5,       # Ratio > 1.5
                'critical': 0       # Ratio <= 1.5
            },
            'duration_risk_levels': {
                'short': {'months': 12, 'multiplier': 0.9},
                'medium': {'months': 24, 'multiplier': 1.0},
                'long': {'months': 36, 'multiplier': 1.15},
                'very_long': {'months': 48, 'multiplier': 1.3}
            }
        }
    
    def process_client_data(self, client_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Traite les donn√©es client compl√®tes avec scoring sur 1000.
        
        Args:
            client_data: Donn√©es du formulaire client
            
        Returns:
            Dict contenant toutes les m√©triques calcul√©es
        """
        try:
            # 1. Validation et nettoyage
            validated_data = self._validate_client_data(client_data)
            
            # 2. Feature engineering
            engineered_features = self._engineer_features(validated_data)
            
            # 3. Simulation de pr√©diction (remplacer par vraie pr√©diction)
            probability_default = self._predict_default_probability(engineered_features)
            
            # 4. Calcul du score sur 1000
            credit_score = probability_to_score(probability_default)
            
            # 5. Analyse compl√®te
            analysis_result = self._comprehensive_analysis(
                validated_data, engineered_features, probability_default, credit_score
            )
            
            logger.info(f"Traitement client termin√© - Score: {credit_score}")
            return analysis_result
            
        except Exception as e:
            logger.error(f"Erreur traitement donn√©es client: {str(e)}")
            raise
    
    def _validate_client_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Valide et nettoie les donn√©es client."""
        validated = {}
        
        # Validation √¢ge
        age = data.get('Age', 25)
        validated['Age'] = max(18, min(100, int(age)))
        
        # Validation montant cr√©dit
        credit_amount = data.get('Credit_amount', 1000)
        validated['Credit_amount'] = max(100, min(100000, float(credit_amount)))
        
        # Validation dur√©e
        duration = data.get('Duration', 12)
        validated['Duration'] = max(3, min(72, int(duration)))
        
        # Validation des nouvelles variables financi√®res
        monthly_income = data.get('monthly_income', 2500)
        validated['monthly_income'] = max(0, min(50000, float(monthly_income)))
        
        monthly_expenses = data.get('monthly_expenses', 1800)
        validated['monthly_expenses'] = max(0, min(20000, float(monthly_expenses)))
        
        existing_debt = data.get('existing_debt', 0)
        validated['existing_debt'] = max(0, min(500000, float(existing_debt)))
        
        # Variables cat√©gorielles avec valeurs par d√©faut
        categorical_defaults = {
            'Job': 'technician',
            'Housing': 'rent',
            'Saving_accounts': 'little',
            'Checking_account': 'little',
            'Purpose': 'car',
            'Sex': 'male',
            'current_credit_score': '650-750',
            'payment_history': 'Bon',
            'marital_status': 'C√©libataire'
        }
        
        for var, default in categorical_defaults.items():
            validated[var] = data.get(var, default)
        
        return validated
    
    def _engineer_features(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√®re les features engineered."""
        features = data.copy()
        
        # Calcul des ratios et scores avec vraies donn√©es financi√®res
        monthly_income = data.get('monthly_income', self._estimate_income(data['Age'], data['Job']))
        
        features['Income_Credit_Ratio'] = monthly_income * 12 / data['Credit_amount']  # Ratio revenu annuel/cr√©dit
        features['Debt_to_Income_Ratio'] = (data.get('monthly_expenses', 0) + data.get('existing_debt', 0)/12) / monthly_income if monthly_income > 0 else 0
        features['Duration_Risk_Score'] = self._calculate_duration_risk(data['Duration'])
        features['Age_Group'] = self._categorize_age(data['Age'])
        features['Credit_Risk_Category'] = self._categorize_credit_risk(data['Credit_amount'])
        features['Financial_Stability_Score'] = self._calculate_financial_stability_advanced(data)
        features['Payment_Quality_Score'] = self._calculate_payment_quality(data.get('payment_history', 'Bon'))
        features['Credit_Score_Numeric'] = self._convert_credit_score_to_numeric(data.get('current_credit_score', '650-750'))
        
        return features
    
    def _estimate_income(self, age: int, job: str) -> float:
        """Estime le revenu bas√© sur l'√¢ge et le m√©tier."""
        base_salaries = {
            'management': 4500, 'technician': 3200, 'entrepreneur': 4000,
            'admin.': 2800, 'services': 2400, 'self-employed': 3500,
            'blue-collar': 2600, 'retired': 1800, 'unemployed': 800,
            'student': 600, 'housemaid': 1400, 'unknown': 2500
        }
        
        base = base_salaries.get(job, 2500)
        
        # Ajustement selon l'√¢ge
        if age < 25:
            multiplier = 0.7
        elif age < 35:
            multiplier = 1.0
        elif age < 50:
            multiplier = 1.3
        elif age < 65:
            multiplier = 1.5
        else:
            multiplier = 0.6
            
        return base * multiplier
    
    def _calculate_duration_risk(self, duration: int) -> float:
        """Calcule le score de risque selon la dur√©e."""
        if duration <= 12:
            return 0.8
        elif duration <= 24:
            return 1.0
        elif duration <= 36:
            return 1.3
        else:
            return 1.6
    
    def _categorize_age(self, age: int) -> str:
        """Cat√©gorise l'√¢ge."""
        for category, config in self.business_rules['age_segments'].items():
            if config['range'][0] <= age <= config['range'][1]:
                return category
        return 'adult'
    
    def _categorize_credit_risk(self, amount: float) -> str:
        """Cat√©gorise le risque selon le montant."""
        if amount < 2000:
            return 'low'
        elif amount < 5000:
            return 'medium'
        elif amount < 10000:
            return 'high'
        else:
            return 'very_high'
    
    def _calculate_financial_stability_advanced(self, data: Dict[str, Any]) -> float:
        """
        Calcule un score de stabilit√© financi√®re avanc√©.
        
        Args:
            data: Donn√©es client
            
        Returns:
            Score de stabilit√© (0-1)
        """
        stability_score = 0.0
        
        # Ratio revenus/d√©penses (40% du score)
        monthly_income = data.get('monthly_income', 2500)
        monthly_expenses = data.get('monthly_expenses', 1800)
        if monthly_income > 0:
            income_expense_ratio = (monthly_income - monthly_expenses) / monthly_income
            stability_score += min(0.4, income_expense_ratio * 0.4)
        
        # Historique paiements (30% du score)
        payment_history = data.get('payment_history', 'Bon')
        payment_scores = {
            'Excellent': 0.3, 'Bon': 0.24, 'Moyen': 0.15, 
            'Mauvais': 0.05, 'Aucun historique': 0.1
        }
        stability_score += payment_scores.get(payment_history, 0.1)
        
        # Score cr√©dit (20% du score)
        credit_score = data.get('current_credit_score', '650-750')
        credit_scores = {
            '750-850': 0.2, '650-750': 0.16, '500-650': 0.1, 
            '300-500': 0.04, 'Inconnu': 0.08
        }
        stability_score += credit_scores.get(credit_score, 0.08)
        
        # Stabilit√© emploi (10% du score)
        job_stability = {
            'management': 0.1, 'technician': 0.08, 'admin.': 0.08,
            'services': 0.06, 'blue-collar': 0.06, 'self-employed': 0.05,
            'unemployed': 0.0, 'retired': 0.07, 'student': 0.02
        }
        stability_score += job_stability.get(data.get('Job', 'unknown'), 0.04)
        
        return min(1.0, stability_score)
    
    def _calculate_payment_quality(self, payment_history: str) -> float:
        """
        Convertit l'historique de paiement en score num√©rique.
        
        Args:
            payment_history: Historique de paiement
            
        Returns:
            Score qualit√© (0-1)
        """
        scores = {
            'Excellent': 1.0,
            'Bon': 0.8,
            'Moyen': 0.5,
            'Mauvais': 0.2,
            'Aucun historique': 0.6  # Neutre
        }
        return scores.get(payment_history, 0.5)
    
    def _convert_credit_score_to_numeric(self, credit_score_range: str) -> float:
        """
        Convertit une plage de score cr√©dit en valeur num√©rique.
        
        Args:
            credit_score_range: Plage de score (ex: '650-750')
            
        Returns:
            Score num√©rique normalis√© (0-1)
        """
        score_mappings = {
            '300-500': 0.25,  # 400 moyenne, normalis√©
            '500-650': 0.45,  # 575 moyenne
            '650-750': 0.7,   # 700 moyenne
            '750-850': 0.95,  # 800 moyenne
            'Inconnu': 0.5    # Valeur neutre
        }
        return score_mappings.get(credit_score_range, 0.5)
    
    def _predict_default_probability(self, features: Dict[str, Any]) -> float:
        """
        Fait une pr√©diction avec le mod√®le R√©gression Logistique entra√Æn√©.
        """
        try:
            # Importer le mod√®le loader
            from .model_loader import ModelLoader
            
            # Charger le mod√®le
            model_loader = ModelLoader()
            model, metadata = model_loader.load_model()
            
            if model is None:
                logger.warning("Mod√®le non disponible, utilisation de la simulation")
                return self._simulate_prediction(features)
            
            # Pr√©parer les donn√©es pour le mod√®le
            model_features = self._prepare_features_for_model(features)
            
            # Faire la pr√©diction
            probability = model.predict_proba(model_features)[0][1]  # Probabilit√© de d√©faut
            
            logger.info(f"Pr√©diction avec mod√®le r√©el: {probability:.3f}")
            return probability
            
        except Exception as e:
            logger.warning(f"Erreur lors de l'utilisation du mod√®le, utilisation de la simulation: {str(e)}")
            return self._simulate_prediction(features)
    
    def _simulate_prediction(self, features: Dict[str, Any]) -> float:
        """
        Simulation de pr√©diction (fallback si le mod√®le n'est pas disponible).
        """
        # Simulation bas√©e sur les features principales (r√©gression logistique)
        base_probability = 0.2  # 20% de base
        
        # Facteurs de risque (coefficients simul√©s de r√©gression logistique)
        risk_factors = 0.0
        
        # √Çge (coefficient: -0.01)
        age_normalized = (features['Age'] - 35) / 20
        risk_factors += age_normalized * -0.01
        
        # Ratio revenus/cr√©dit (coefficient: -0.5)
        income_ratio = features.get('Income_Credit_Ratio', 1.0)
        risk_factors += (2.0 - income_ratio) * 0.15
        
        # Ratio d'endettement (coefficient: +0.8)
        debt_ratio = features.get('Debt_to_Income_Ratio', 0.3)
        risk_factors += debt_ratio * 0.8
        
        # Score cr√©dit (coefficient: -0.6)
        credit_score = features.get('Credit_Score_Numeric', 0.7)
        risk_factors += (0.5 - credit_score) * 0.6
        
        # Historique paiements (coefficient: -0.4)
        payment_quality = features.get('Payment_Quality_Score', 0.8)
        risk_factors += (0.5 - payment_quality) * 0.4
        
        # Stabilit√© financi√®re (coefficient: -0.3)
        stability = features.get('Financial_Stability_Score', 0.6)
        risk_factors += (0.5 - stability) * 0.3
        
        # Fonction logistique (sigmoid)
        probability = 1 / (1 + math.exp(-(base_probability + risk_factors)))
        
        # Contraindre entre 0.05 et 0.95
        return max(0.05, min(0.95, probability))
    
    def _prepare_features_for_model(self, features: Dict[str, Any]) -> pd.DataFrame:
        """
        Pr√©pare les features pour qu'elles soient compatibles avec le mod√®le entra√Æn√©.
        """
        # Cr√©er un DataFrame avec les features attendues par le mod√®le
        model_data = {
            'Age': features['Age'],
            'Job': features['Job'],
            'Housing': features['Housing'],
            'Saving_accounts': features['Saving_accounts'],
            'Checking_account': features['Checking_account'], 
            'Credit_amount': features['Credit_amount'],
            'Duration': features['Duration'],
            'Purpose': features['Purpose'],
            'Sex': features['Sex']
        }
        
        # Ajouter les features engineered si elles existent
        if 'Income_Credit_Ratio' in features:
            model_data['Income_Credit_Ratio'] = features['Income_Credit_Ratio']
        if 'Duration_Risk_Score' in features:
            model_data['Duration_Risk_Score'] = features['Duration_Risk_Score']
        if 'Financial_Stability_Score' in features:
            model_data['Financial_Stability_Score'] = features['Financial_Stability_Score']
        
        df = pd.DataFrame([model_data])
        return df
    
    def _comprehensive_analysis(
        self, 
        client_data: Dict[str, Any],
        features: Dict[str, Any], 
        probability: float, 
        score: int
    ) -> Dict[str, Any]:
        """G√©n√®re l'analyse compl√®te du client."""
        
        # M√©triques de base
        risk_class = get_risk_class(score)
        client_rating = get_client_rating(score)
        final_decision = get_final_decision(score)
        
        # Analyse des forces et faiblesses
        strengths, weaknesses = self._analyze_profile_strengths_weaknesses(features)
        
        # Recommandations personnalis√©es
        recommendations = self._generate_recommendations(features, risk_class, final_decision)
        
        # Interpr√©tations m√©tier
        business_interpretation = self._generate_business_interpretation(
            features, probability, score, risk_class
        )
        
        # Compilation du r√©sultat
        result = {
            # Donn√©es de base
            'client_data': client_data,
            'engineered_features': features,
            
            # M√©triques principales
            'probability_default': probability,
            'credit_score': score,
            'score_max': SCORING_CONFIG['score_max'],
            
            # Classifications
            'risk_class': risk_class,
            'client_rating': client_rating,
            'final_decision': final_decision,
            
            # Analyses qualitatives
            'profile_analysis': {
                'strengths': strengths,
                'weaknesses': weaknesses,
                'overall_assessment': self._get_overall_assessment(score)
            },
            
            # Recommandations
            'recommendations': recommendations,
            
            # Interpr√©tations m√©tier
            'business_interpretation': business_interpretation,
            
            # M√©triques de performance (pour dashboard)
            'performance_indicators': self._calculate_performance_indicators(probability, score),
            
            # M√©tadonn√©es
            'analysis_timestamp': datetime.now().isoformat(),
            'model_version': "1.0.0",
            'confidence_level': self._calculate_confidence_level(features)
        }
        
        return result
    
    def _analyze_profile_strengths_weaknesses(self, features: Dict[str, Any]) -> Tuple[List[str], List[str]]:
        """Analyse les forces et faiblesses du profil."""
        strengths = []
        weaknesses = []
        
        # Analyse ratio revenus/cr√©dit
        if features['Income_Credit_Ratio'] > 4:
            strengths.append("Excellent ratio revenus/cr√©dit (>4x)")
        elif features['Income_Credit_Ratio'] < 2:
            weaknesses.append("Ratio revenus/cr√©dit faible (<2x)")
            
        # Analyse stabilit√© financi√®re
        if features['Financial_Stability_Score'] > 0.7:
            strengths.append("Tr√®s bonne stabilit√© financi√®re")
        elif features['Financial_Stability_Score'] < 0.4:
            weaknesses.append("Stabilit√© financi√®re pr√©caire")
            
        # Analyse des comptes
        if features['Checking_account'] == 'rich':
            strengths.append("Solde de compte courant √©lev√©")
        elif features['Checking_account'] == 'critical':
            weaknesses.append("Situation de d√©couvert critique")
            
        if features['Saving_accounts'] == 'rich':
            strengths.append("√âpargne importante (>1000‚Ç¨)")
        elif features['Saving_accounts'] == 'critical':
            weaknesses.append("√âpargne critique ou inexistante")
            
        # Analyse logement
        if features['Housing'] == 'own':
            strengths.append("Propri√©taire de son logement")
        elif features['Housing'] == 'free':
            weaknesses.append("Logement pr√©caire (log√© gratuitement)")
            
        # Analyse emploi
        stable_jobs = ['management', 'technician', 'admin.']
        if features['Job'] in stable_jobs:
            strengths.append("Emploi stable et qualifi√©")
        elif features['Job'] == 'unemployed':
            weaknesses.append("Situation de ch√¥mage")
            
        return strengths, weaknesses
    
    def _generate_recommendations(
        self, 
        features: Dict[str, Any], 
        risk_class: Dict[str, Any], 
        decision: Dict[str, Any]
    ) -> List[Dict[str, str]]:
        """G√©n√®re des recommandations personnalis√©es."""
        recommendations = []
        
        if decision['decision'] == 'APPROVED':
            recommendations.extend([
                {
                    'type': 'success',
                    'title': 'Cr√©dit Approuv√©',
                    'message': 'Profil excellent, conditions pr√©f√©rentielles applicables',
                    'action': 'Proc√©der √† la finalisation du dossier'
                },
                {
                    'type': 'info',
                    'title': 'Suivi Recommand√©',
                    'message': 'Surveillance standard, renouvellement facilit√©',
                    'action': 'Programmer un suivi annuel'
                }
            ])
            
        elif decision['decision'] == 'CONDITIONAL':
            recommendations.extend([
                {
                    'type': 'warning',
                    'title': 'Approbation Conditionnelle',
                    'message': 'N√©cessite des garanties suppl√©mentaires',
                    'action': 'Demander caution ou garantie r√©elle'
                },
                {
                    'type': 'info',
                    'title': 'Conditions Sp√©ciales',
                    'message': 'Taux major√© et dur√©e limit√©e recommand√©s',
                    'action': 'Appliquer grille tarifaire risque mod√©r√©'
                }
            ])
            
        else:  # REJECTED
            recommendations.extend([
                {
                    'type': 'danger',
                    'title': 'Cr√©dit Refus√©',
                    'message': 'Profil de risque trop √©lev√©',
                    'action': 'Proposer solutions alternatives'
                },
                {
                    'type': 'info',
                    'title': 'Am√©lioration Profil',
                    'message': 'R√©√©valuation possible apr√®s am√©lioration situation',
                    'action': 'Programmer r√©√©valuation dans 6 mois'
                }
            ])
        
        # Recommandations sp√©cifiques selon les faiblesses
        if features['Income_Credit_Ratio'] < 2:
            recommendations.append({
                'type': 'warning',
                'title': 'Ratio Revenus/Cr√©dit Faible',
                'message': 'Augmenter les revenus ou r√©duire le montant demand√©',
                'action': 'R√©viser la demande de cr√©dit'
            })
            
        if features['Financial_Stability_Score'] < 0.4:
            recommendations.append({
                'type': 'warning',
                'title': 'Stabilit√© Financi√®re Pr√©caire',
                'message': 'Am√©liorer la situation des comptes avant nouvelle demande',
                'action': 'Conseil en gestion financi√®re'
            })
        
        return recommendations
    
    def _generate_business_interpretation(
        self, 
        features: Dict[str, Any], 
        probability: float, 
        score: int, 
        risk_class: Dict[str, Any]
    ) -> Dict[str, Any]:
        """G√©n√®re les interpr√©tations m√©tier."""
        
        interpretation = {
            'executive_summary': self._get_executive_summary(score, risk_class, probability),
            'risk_assessment': self._get_risk_assessment(probability, features),
            'financial_analysis': self._get_financial_analysis(features),
            'regulatory_compliance': self._get_regulatory_compliance(score, probability),
            'market_positioning': self._get_market_positioning(score, risk_class)
        }
        
        return interpretation
    
    def _get_executive_summary(self, score: int, risk_class: Dict, probability: float) -> str:
        """R√©sum√© ex√©cutif de l'analyse."""
        return f"""
        **R√âSUM√â EX√âCUTIF**
        
        Score de cr√©dit: **{score}/1000** (Classe {risk_class['class']})
        Probabilit√© de d√©faut: **{probability:.2%}**
        
        Le client pr√©sente un profil de risque **{risk_class['description'].lower()}** 
        selon nos crit√®res d'√©valuation B√¢le III. Ce score place le client dans la 
        classe de risque {risk_class['class']} avec un taux de d√©faut historique 
        de {risk_class['default_rate']}.
        
        **Recommandation strat√©gique**: {'Approuver avec conditions standard' if score >= 650 else 'Approuver avec surveillance renforc√©e' if score >= 400 else 'Refuser et proposer alternatives'}
        """
    
    def _get_risk_assessment(self, probability: float, features: Dict) -> str:
        """√âvaluation d√©taill√©e du risque."""
        risk_level = "FAIBLE" if probability < 0.1 else "MOD√âR√â" if probability < 0.3 else "√âLEV√â"
        
        return f"""
        **√âVALUATION DU RISQUE**
        
        Niveau de risque: **{risk_level}**
        Probabilit√© de d√©faut: **{probability:.2%}**
        
        Facteurs de risque principaux:
        - Ratio revenus/cr√©dit: {features['Income_Credit_Ratio']:.2f}x
        - Score de stabilit√©: {features['Financial_Stability_Score']:.2f}/1.0
        - Score risque dur√©e: {features['Duration_Risk_Score']:.2f}
        
        Cette √©valuation est conforme aux standards r√©glementaires B√¢le III 
        et int√®gre nos mod√®les propri√©taires de scoring.
        """
    
    def _get_financial_analysis(self, features: Dict) -> str:
        """Analyse financi√®re d√©taill√©e."""
        return f"""
        **ANALYSE FINANCI√àRE**
        
        Situation patrimoniale:
        - Logement: {self.feature_mappings['Housing'].get(features['Housing'], features['Housing'])}
        - Compte courant: {self.feature_mappings['Checking_account'].get(features['Checking_account'], features['Checking_account'])}
        - √âpargne: {self.feature_mappings['Saving_accounts'].get(features['Saving_accounts'], features['Saving_accounts'])}
        
        Capacit√© de remboursement:
        - Ratio revenus/cr√©dit: {features['Income_Credit_Ratio']:.2f}x
        - Stabilit√© financi√®re: {features['Financial_Stability_Score']:.0%}
        
        Le profil financier {'est solide' if features['Financial_Stability_Score'] > 0.6 else 'pr√©sente des fragilit√©s'} 
        avec {'une excellente' if features['Income_Credit_Ratio'] > 3 else 'une' if features['Income_Credit_Ratio'] > 2 else 'une faible'} 
        capacit√© de remboursement.
        """
    
    def _get_regulatory_compliance(self, score: int, probability: float) -> str:
        """V√©rification conformit√© r√©glementaire."""
        basel_compliant = score >= 300  # Seuil minimum B√¢le III fictif
        
        return f"""
        **CONFORMIT√â R√âGLEMENTAIRE**
        
        B√¢le III: {'‚úÖ CONFORME' if basel_compliant else '‚ùå NON CONFORME'}
        GDPR: ‚úÖ Donn√©es anonymis√©es
        Audit Trail: ‚úÖ Tra√ßabilit√© compl√®te
        
        Score minimum r√©glementaire: 300/1000
        Score obtenu: {score}/1000
        
        {'Le dossier respecte toutes les exigences r√©glementaires.' if basel_compliant else 'Le dossier ne respecte pas les seuils minimums B√¢le III.'}
        """
    
    def _get_market_positioning(self, score: int, risk_class: Dict) -> str:
        """Positionnement march√© du client."""
        if score >= 800:
            segment = "clients premium"
            strategy = "Offres privil√©gi√©es et fid√©lisation"
        elif score >= 650:
            segment = "clients standards"
            strategy = "Offres standards avec potentiel d'upselling"
        elif score >= 400:
            segment = "clients √† surveiller"
            strategy = "Surveillance renforc√©e et conditions protectives"
        else:
            segment = "clients √† haut risque"
            strategy = "Refus ou offres tr√®s restrictives"
            
        return f"""
        **POSITIONNEMENT MARCH√â**
        
        Segment client: **{segment.upper()}**
        Classe de risque: {risk_class['class']} ({risk_class['description']})
        
        Strat√©gie recommand√©e: {strategy}
        
        Positionnement concurrentiel: {'Avantage comp√©titif fort' if score >= 750 else 'Position standard' if score >= 500 else 'D√©savantage concurrentiel'}
        """
    
    def _get_overall_assessment(self, score: int) -> str:
        """√âvaluation globale du profil."""
        if score >= 800:
            return "EXCELLENT - Client de r√©f√©rence"
        elif score >= 650:
            return "BON - Client fiable"
        elif score >= 500:
            return "ACCEPTABLE - Surveillance standard"
        elif score >= 350:
            return "RISQU√â - Surveillance renforc√©e"
        else:
            return "CRITIQUE - Risque tr√®s √©lev√©"
    
    def _calculate_performance_indicators(self, probability: float, score: int) -> Dict[str, Any]:
        """Calcule les indicateurs de performance pour le dashboard."""
        return {
            'model_confidence': min(1.0, 1 - abs(probability - 0.5) * 2),
            'score_percentile': self._calculate_score_percentile(score),
            'risk_stability': 0.85,  # Simulation
            'prediction_accuracy': 0.806,  # AUC du mod√®le
            'processing_time': np.random.uniform(0.5, 2.0),  # Simulation temps
        }
    
    def _calculate_score_percentile(self, score: int) -> float:
        """Calcule le percentile du score (simulation)."""
        # Simulation d'une distribution normale centr√©e sur 600
        from scipy import stats
        return stats.norm.cdf(score, 600, 150)
    
    def _calculate_confidence_level(self, features: Dict[str, Any]) -> float:
        """Calcule le niveau de confiance de la pr√©diction."""
        # Simulation bas√©e sur la compl√©tude des donn√©es
        completeness = 1.0  # Toutes les donn√©es sont pr√©sentes
        consistency = 0.9   # Simulation coh√©rence des donn√©es
        
        confidence = (completeness + consistency) / 2
        return min(1.0, confidence + np.random.uniform(-0.1, 0.1))
    
    @staticmethod
    def get_feature_descriptions() -> Dict[str, str]:
        """Retourne les descriptions des features pour l'interface."""
        return {
            'Age': '√Çge du demandeur (ann√©es)',
            'Job': 'Profession ou statut professionnel',
            'Housing': 'Situation de logement',
            'Saving_accounts': 'Niveau du compte √©pargne',
            'Checking_account': 'Situation du compte courant',
            'Credit_amount': 'Montant du cr√©dit demand√© (‚Ç¨)',
            'Duration': 'Dur√©e souhait√©e (mois)',
            'Purpose': 'Objet du financement',
            'Sex': 'Genre du demandeur',
            'Income_Credit_Ratio': 'Ratio revenus estim√©s / montant cr√©dit',
            'Financial_Stability_Score': 'Score de stabilit√© financi√®re (0-1)',
            'Duration_Risk_Score': 'Score de risque li√© √† la dur√©e',
            'Age_Group': 'Cat√©gorie d\'√¢ge',
            'Credit_Risk_Category': 'Cat√©gorie de risque du montant'
        }
    
    @staticmethod 
    def get_input_validation_rules() -> Dict[str, Dict]:
        """Retourne les r√®gles de validation pour les inputs."""
        return {
            'Age': {'min': 18, 'max': 100, 'type': 'int'},
            'Credit_amount': {'min': 100, 'max': 100000, 'type': 'float'},
            'Duration': {'min': 3, 'max': 72, 'type': 'int'},
            'Job': {'type': 'select', 'required': True},
            'Housing': {'type': 'select', 'required': True},
            'Saving_accounts': {'type': 'select', 'required': True},
            'Checking_account': {'type': 'select', 'required': True},
            'Purpose': {'type': 'select', 'required': True},
            'Sex': {'type': 'select', 'required': True}
        } 