"""
Feature Engineering Module for Credit Scoring System

This module implements comprehensive business feature engineering according to 
the specifications defined in PROJET_COMPLET_SPECIFICATION.md

Author: Credit Scoring Team
Created: 2024
"""

import pandas as pd
import numpy as np
import logging
from typing import Tuple, Dict, List, Any
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore')


class FeatureEngineer:
    """
    √âTAPE 3: Feature Engineering M√©tier
    
    Impl√©mente la cr√©ation de features m√©tier selon l'architecture d√©finie :
    - Features m√©tier (ratios financiers, comportement cr√©dit)
    - Features d'interaction
    - Features temporelles
    """
    
    def __init__(self, config: Dict = None):
        """
        Initialisation du Feature Engineer
        
        Args:
            config: Configuration pour le feature engineering
        """
        self.config = config or {}
        self.logger = logging.getLogger(__name__)
        self.feature_info = {}  # Information sur les features cr√©√©es
        
        # Configuration par d√©faut
        self.default_config = {
            'create_ratios': True,
            'create_interactions': True,
            'create_temporal': True,
            'create_risk_indicators': True
        }
        
    def create_business_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        √âTAPE 3.1: Cr√©ation des features m√©tier
        
        Cr√©e les features business selon les sp√©cifications :
        - Ratios financiers (dette/revenus, √©pargne, etc.)
        - Score comportement cr√©dit
        - Indicateurs de risque
        - Features d√©mographiques
        """
        print("\nüîß √âTAPE 3.1: CR√âATION DES FEATURES M√âTIER")
        print("=" * 55)
        
        df_features = df.copy()
        created_features = []
        
        # 1. Ratios financiers
        print("\nüí∞ Cr√©ation des ratios financiers...")
        df_features, ratio_features = self._create_financial_ratios(df_features)
        created_features.extend(ratio_features)
        
        # 2. Features de comportement cr√©dit
        print("\nüìä Cr√©ation des features comportement cr√©dit...")
        df_features, credit_features = self._create_credit_behavior_features(df_features)
        created_features.extend(credit_features)
        
        # 3. Indicateurs de risque
        print("\n‚ö†Ô∏è Cr√©ation des indicateurs de risque...")
        df_features, risk_features = self._create_risk_indicators(df_features)
        created_features.extend(risk_features)
        
        # 4. Features d√©mographiques
        print("\nüë• Cr√©ation des features d√©mographiques...")
        df_features, demo_features = self._create_demographic_features(df_features)
        created_features.extend(demo_features)
        
        self.feature_info['business_features'] = created_features
        print(f"\n‚úÖ {len(created_features)} features m√©tier cr√©√©es avec succ√®s!")
        
        return df_features
    
    def _create_financial_ratios(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des ratios financiers"""
        created_features = []
        
        # 1. Ratio dette/revenus (Dette totale / Revenus estim√©s)
        # Conversion du taux d'endettement texte en num√©rique
        taux_mapping = {
            'inferieur a 20%': 15,
            'compris entre 20% et 25%': 22.5,
            'compris entre 25% et 35%': 30,
            'superieur a 35%': 40
        }
        df['taux_endettement_num'] = df['taux_endettement'].map(taux_mapping).fillna(25)
        
        # Estimation des revenus bas√©e sur le montant demand√© et le taux d'endettement
        df['revenus_estimes'] = np.where(
            df['taux_endettement_num'] > 0,
            df['montant'] / (df['taux_endettement_num'] / 100),
            df['montant'] * 5  # Estimation conservative
        )
        
        df['debt_to_income_ratio'] = np.where(
            df['revenus_estimes'] > 0,
            df['montant'] / df['revenus_estimes'],
            0
        )
        created_features.append('debt_to_income_ratio')
        
        # 2. Taux d'utilisation cr√©dit (bas√© sur le montant vs capacit√© estim√©e)
        df['credit_utilization_ratio'] = np.clip(df['taux_endettement_num'] / 100, 0, 1)
        created_features.append('credit_utilization_ratio')
        
        # 3. Taux d'√©pargne (bas√© sur la variable √©pargne)
        epargne_mapping = {
            'A11': 0.0,   # < 100 DM
            'A12': 0.1,   # 100-500 DM
            'A13': 0.3,   # 500-1000 DM
            'A14': 0.6,   # >= 1000 DM
            'A15': 0.0    # Inconnu
        }
        df['savings_rate'] = df['epargne'].map(epargne_mapping).fillna(0)
        created_features.append('savings_rate')
        
        # 4. Ratio d√©penses/revenus estim√©
        df['expense_to_income_ratio'] = np.where(
            df['revenus_estimes'] > 0,
            (df['montant'] * 0.1) / df['revenus_estimes'],  # 10% du montant comme proxy d√©penses
            0
        )
        created_features.append('expense_to_income_ratio')
        
        # 5. Capacit√© de remboursement
        df['repayment_capacity'] = df['revenus_estimes'] - (df['revenus_estimes'] * df['credit_utilization_ratio'])
        created_features.append('repayment_capacity')
        
        print(f"   ‚úÖ {len(created_features)} ratios financiers cr√©√©s")
        return df, created_features
    
    def _create_credit_behavior_features(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des features de comportement cr√©dit"""
        created_features = []
        
        # 1. Score historique paiements (bas√© sur historique)
        historique_scores = {
            'A30': 1.0,   # Pas de cr√©dit / tous pay√©s
            'A31': 0.9,   # Tous pay√©s √† temps
            'A32': 0.7,   # Pay√©s √† temps jusqu'√† pr√©sent
            'A33': 0.4,   # Retard dans le pass√©
            'A34': 0.1    # Compte critique
        }
        df['payment_history_score'] = df['historique'].map(historique_scores).fillna(0.5)
        created_features.append('payment_history_score')
        
        # 2. Diversit√© des types de cr√©dit (credit mix)
        objet_diversity = {
            'A40': 0.2,   # Voiture neuve
            'A41': 0.3,   # Voiture occasion  
            'A42': 0.6,   # Mobilier/√©quipement
            'A43': 0.4,   # Radio/TV
            'A44': 0.5,   # √âlectrom√©nager
            'A45': 0.7,   # R√©parations
            'A46': 0.8,   # √âducation
            'A47': 0.6,   # Vacances
            'A48': 0.9,   # Reconversion
            'A49': 0.8,   # Entreprise
            'A410': 0.5   # Autres
        }
        df['credit_mix_diversity'] = df['objet'].map(objet_diversity).fillna(0.5)
        created_features.append('credit_mix_diversity')
        
        # 3. Nombre de demandes r√©centes (bas√© sur nombre_credit)
        df['recent_inquiries_count'] = np.where(
            df['nombre_credit'].isin(['A141', 'A142']),  # Banque/magasins
            df['nombre_credit'].map({'A141': 2, 'A142': 1}).fillna(0),
            0
        )
        created_features.append('recent_inquiries_count')
        
        # 4. √Çge moyen des comptes (bas√© sur anciennet√© emploi)
        anciennete_mapping = {
            'A71': 0.5,   # Ch√¥meur
            'A72': 1,     # < 1 an
            'A73': 2.5,   # 1-4 ans
            'A74': 7,     # 4-7 ans
            'A75': 10     # >= 7 ans
        }
        df['account_age_average'] = df['anciennete_emploi'].map(anciennete_mapping).fillna(0)
        created_features.append('account_age_average')
        
        print(f"   ‚úÖ {len(created_features)} features comportement cr√©dit cr√©√©es")
        return df, created_features
    
    def _create_risk_indicators(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des indicateurs de risque"""
        created_features = []
        
        # 1. Score risque faillite (combinaison de facteurs)
        df['bankruptcy_risk_score'] = (
            (1 - df['payment_history_score']) * 0.4 +
            df['credit_utilization_ratio'] * 0.3 +
            (1 - df['savings_rate']) * 0.2 +
            df['debt_to_income_ratio'] * 0.1
        )
        created_features.append('bankruptcy_risk_score')
        
        # 2. Fr√©quence retards (bas√© sur historique)
        retard_frequency = {
            'A30': 0.0,   # Pas de cr√©dit
            'A31': 0.0,   # Tous pay√©s √† temps
            'A32': 0.1,   # Pay√©s √† temps jusqu'√† pr√©sent
            'A33': 0.6,   # Retard dans le pass√©
            'A34': 0.9    # Compte critique
        }
        df['late_payment_frequency'] = df['historique'].map(retard_frequency).fillna(0.3)
        created_features.append('late_payment_frequency')
        
        # 3. Utilisation limite cr√©dit
        df['credit_limit_usage'] = np.clip(df['taux_endettement_num'] / 100, 0, 1)
        created_features.append('credit_limit_usage')
        
        # 4. Score stabilit√© emploi
        stabilite_emploi = {
            'A71': 0.0,   # Ch√¥meur
            'A72': 0.2,   # < 1 an
            'A73': 0.6,   # 1-4 ans
            'A74': 0.8,   # 4-7 ans
            'A75': 1.0    # >= 7 ans
        }
        df['employment_stability_score'] = df['anciennete_emploi'].map(stabilite_emploi).fillna(0.3)
        created_features.append('employment_stability_score')
        
        print(f"   ‚úÖ {len(created_features)} indicateurs de risque cr√©√©s")
        return df, created_features
    
    def _create_demographic_features(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des features d√©mographiques"""
        created_features = []
        
        # 1. Segment √¢ge-revenus
        df['age_income_segment'] = pd.cut(
            df['age'], 
            bins=[0, 25, 35, 45, 55, 100], 
            labels=['young', 'young_adult', 'adult', 'mature', 'senior']
        ).astype(str)
        
        # Combinaison avec les revenus
        df['age_income_combined'] = (
            df['age_income_segment'] + '_' + 
            pd.cut(df['revenus_estimes'], bins=3, labels=['low', 'medium', 'high']).astype(str)
        )
        created_features.append('age_income_combined')
        
        # 2. Concordance √©ducation-emploi (proxy via statut)
        statut_education_match = {
            'A91': 0.2,   # Homme divorc√©/s√©par√©
            'A92': 0.6,   # Femme divorc√©e/s√©par√©e/mari√©e
            'A93': 0.8,   # Homme c√©libataire
            'A94': 0.7    # Homme mari√©/veuf
        }
        df['education_employment_match'] = df['statut'].map(statut_education_match).fillna(0.5)
        created_features.append('education_employment_match')
        
        # 3. Facteur risque r√©gional (bas√© sur le logement)
        regional_risk = {
            'A151': 0.3,  # Loue
            'A152': 0.1,  # Propri√©taire
            'A153': 0.5   # Gratuit
        }
        df['regional_risk_factor'] = df['logement'].map(regional_risk).fillna(0.4)
        created_features.append('regional_risk_factor')
        
        print(f"   ‚úÖ {len(created_features)} features d√©mographiques cr√©√©es")
        return df, created_features
    
    def create_interaction_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        √âTAPE 3.2: Cr√©ation des features d'interaction
        
        Cr√©e les interactions entre variables selon les sp√©cifications
        """
        print("\nüîó √âTAPE 3.2: CR√âATION DES FEATURES D'INTERACTION")
        print("=" * 55)
        
        df_interactions = df.copy()
        created_features = []
        
        # 1. Interactions num√©riques
        print("\nüî¢ Interactions num√©riques...")
        df_interactions, num_features = self._create_numerical_interactions(df_interactions)
        created_features.extend(num_features)
        
        # 2. Interactions cat√©gorielles
        print("\nüìä Interactions cat√©gorielles...")
        df_interactions, cat_features = self._create_categorical_interactions(df_interactions)
        created_features.extend(cat_features)
        
        # 3. Interactions mixtes
        print("\nüîÄ Interactions mixtes...")
        df_interactions, mixed_features = self._create_mixed_interactions(df_interactions)
        created_features.extend(mixed_features)
        
        self.feature_info['interaction_features'] = created_features
        print(f"\n‚úÖ {len(created_features)} features d'interaction cr√©√©es!")
        
        return df_interactions
    
    def _create_numerical_interactions(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des interactions num√©riques"""
        created_features = []
        
        # 1. √Çge √ó Revenus
        df['age_income_interaction'] = df['age'] * df['revenus_estimes'] / 1000
        created_features.append('age_income_interaction')
        
        # 2. Dette √ó Revenus
        df['debt_income_interaction'] = df['montant'] * df['revenus_estimes'] / 10000
        created_features.append('debt_income_interaction')
        
        # 3. Score √ó Utilisation
        df['score_utilization_interaction'] = df['payment_history_score'] * df['credit_utilization_ratio']
        created_features.append('score_utilization_interaction')
        
        # 4. Montant √ó Dur√©e
        df['amount_duration_interaction'] = df['montant'] * df['duree'] / 100
        created_features.append('amount_duration_interaction')
        
        print(f"   ‚úÖ {len(created_features)} interactions num√©riques cr√©√©es")
        return df, created_features
    
    def _create_categorical_interactions(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des interactions cat√©gorielles"""
        created_features = []
        
        # 1. √âducation √ó Emploi (via statut √ó anciennet√©)
        df['education_employment'] = df['statut'].astype(str) + '_' + df['anciennete_emploi'].astype(str)
        created_features.append('education_employment')
        
        # 2. Statut √ó Logement
        df['marital_housing'] = df['statut'].astype(str) + '_' + df['logement'].astype(str)
        created_features.append('marital_housing')
        
        # 3. Objectif √ó Montant (cat√©goris√©)
        montant_categories = pd.cut(df['montant'], bins=3, labels=['low', 'medium', 'high'])
        df['purpose_amount'] = df['objet'].astype(str) + '_' + montant_categories.astype(str)
        created_features.append('purpose_amount')
        
        print(f"   ‚úÖ {len(created_features)} interactions cat√©gorielles cr√©√©es")
        return df, created_features
    
    def _create_mixed_interactions(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des interactions mixtes"""
        created_features = []
        
        # 1. Cat√©gorie √¢ge √ó Revenus
        age_categories = pd.cut(df['age'], bins=[0, 30, 50, 100], labels=['young', 'middle', 'senior'])
        df['age_category_income'] = age_categories.astype(str) + '_income_' + \
                                   pd.cut(df['revenus_estimes'], bins=3, labels=['low', 'med', 'high']).astype(str)
        created_features.append('age_category_income')
        
        # 2. Stabilit√© emploi √ó Score
        df['employment_stability_payment'] = df['employment_stability_score'] * df['payment_history_score']
        created_features.append('employment_stability_payment')
        
        print(f"   ‚úÖ {len(created_features)} interactions mixtes cr√©√©es")
        return df, created_features
    
    def create_temporal_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        √âTAPE 3.3: Cr√©ation des features temporelles
        
        Cr√©e les features bas√©es sur le temps selon les sp√©cifications
        """
        print("\n‚è∞ √âTAPE 3.3: CR√âATION DES FEATURES TEMPORELLES")
        print("=" * 55)
        
        df_temporal = df.copy()
        created_features = []
        
        # 1. Cycle de vie des comptes
        print("\nüîÑ Features cycle de vie...")
        df_temporal, lifecycle_features = self._create_account_lifecycle(df_temporal)
        created_features.extend(lifecycle_features)
        
        # 2. Patterns saisonniers
        print("\nüåü Features saisonni√®res...")
        df_temporal, seasonal_features = self._create_seasonal_patterns(df_temporal)
        created_features.extend(seasonal_features)
        
        # 3. Features de tendance
        print("\nüìà Features de tendance...")
        df_temporal, trend_features = self._create_trend_features(df_temporal)
        created_features.extend(trend_features)
        
        self.feature_info['temporal_features'] = created_features
        print(f"\n‚úÖ {len(created_features)} features temporelles cr√©√©es!")
        
        return df_temporal
    
    def _create_account_lifecycle(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des features de cycle de vie"""
        created_features = []
        
        # 1. √Çge compte en mois (bas√© sur anciennet√© emploi)
        df['account_age_months'] = df['account_age_average'] * 12
        created_features.append('account_age_months')
        
        # 2. Temps depuis dernier paiement (simul√©)
        np.random.seed(42)
        df['time_since_last_payment'] = np.random.exponential(30, len(df))  # jours
        created_features.append('time_since_last_payment')
        
        # 3. Longueur historique cr√©dit
        df['credit_history_length'] = df['account_age_months'] + np.random.normal(12, 6, len(df))
        df['credit_history_length'] = np.clip(df['credit_history_length'], 0, None)
        created_features.append('credit_history_length')
        
        print(f"   ‚úÖ {len(created_features)} features cycle de vie cr√©√©es")
        return df, created_features
    
    def _create_seasonal_patterns(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des features saisonni√®res"""
        created_features = []
        
        # Simulation de mois de demande
        np.random.seed(42)
        df['application_month'] = np.random.randint(1, 13, len(df))
        created_features.append('application_month')
        
        # Indicateur risque saisonnier
        seasonal_risk = {1: 0.1, 2: 0.1, 3: 0.2, 4: 0.3, 5: 0.4, 6: 0.5,
                        7: 0.6, 8: 0.5, 9: 0.4, 10: 0.3, 11: 0.2, 12: 0.8}
        df['seasonal_risk_indicator'] = df['application_month'].map(seasonal_risk)
        created_features.append('seasonal_risk_indicator')
        
        # Proximit√© vacances (juin-ao√ªt, d√©cembre)
        df['holiday_proximity'] = df['application_month'].apply(
            lambda x: 1 if x in [6, 7, 8, 12] else 0
        )
        created_features.append('holiday_proximity')
        
        print(f"   ‚úÖ {len(created_features)} features saisonni√®res cr√©√©es")
        return df, created_features
    
    def _create_trend_features(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, List[str]]:
        """Cr√©ation des features de tendance"""
        created_features = []
        
        # Simulation de tendances (en r√©alit√©, cela viendrait de donn√©es historiques)
        np.random.seed(42)
        
        # 1. Tendance revenus
        df['income_trend'] = np.random.normal(0, 0.1, len(df))  # -1 √† 1
        created_features.append('income_trend')
        
        # 2. Tendance d√©penses
        df['spending_trend'] = np.random.normal(0, 0.15, len(df))
        created_features.append('spending_trend')
        
        # 3. Tendance utilisation cr√©dit
        df['credit_usage_trend'] = np.random.normal(0, 0.2, len(df))
        created_features.append('credit_usage_trend')
        
        print(f"   ‚úÖ {len(created_features)} features de tendance cr√©√©es")
        return df, created_features
    
    def engineer_all_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Pipeline complet de feature engineering
        
        Ex√©cute toutes les √©tapes de cr√©ation de features dans l'ordre :
        1. Features m√©tier
        2. Features d'interaction  
        3. Features temporelles
        
        Args:
            df: DataFrame d'entr√©e
            
        Returns:
            DataFrame avec toutes les features cr√©√©es
        """
        print("\nüöÄ PIPELINE COMPLET DE FEATURE ENGINEERING")
        print("=" * 60)
        
        # Sauvegarde des colonnes originales
        original_columns = df.columns.tolist()
        
        # √âtape 1: Features m√©tier
        df_engineered = self.create_business_features(df)
        
        # √âtape 2: Features d'interaction
        df_engineered = self.create_interaction_features(df_engineered)
        
        # √âtape 3: Features temporelles
        df_engineered = self.create_temporal_features(df_engineered)
        
        # Rapport final
        new_features = [col for col in df_engineered.columns if col not in original_columns]
        
        print(f"\nüéØ R√âSUM√â FEATURE ENGINEERING")
        print("=" * 35)
        print(f"üìä Features originales: {len(original_columns)}")
        print(f"üÜï Nouvelles features: {len(new_features)}")
        print(f"üìà Total features: {len(df_engineered.columns)}")
        
        # Stockage des informations
        self.feature_info['original_features'] = original_columns
        self.feature_info['new_features'] = new_features
        self.feature_info['total_features'] = len(df_engineered.columns)
        
        return df_engineered
    
    def get_feature_info(self) -> Dict[str, Any]:
        """Retourne les informations sur les features cr√©√©es"""
        return self.feature_info
    
    def get_feature_importance_groups(self) -> Dict[str, List[str]]:
        """Retourne les groupes de features pour l'analyse d'importance"""
        return {
            'business_features': self.feature_info.get('business_features', []),
            'interaction_features': self.feature_info.get('interaction_features', []),
            'temporal_features': self.feature_info.get('temporal_features', [])
        } 